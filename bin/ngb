#!/usr/bin/env node

'use strict';

const startTime = Date.now();
process.title = 'angular-build';

const fs = require('fs');
const path = require('path');
const supportsColor = require('supports-color');
const SemVer = require('semver').SemVer;

function _colorize(str, key) {
    if (!supportsColor) {
        return str;
    }

    const buf = [];
    buf.push(key);
    buf.push(str);
    buf.push('\u001b[37m');
    buf.push('\u001b[39m\u001b[22m');
    return buf.join('');
}

function _yellow(str) {
    return _colorize(str, '\u001b[1m\u001b[33m');
}

function _exit(code) {
    if (process.platform === 'win32' && process.stdout.bufferSize) {
        process.stdout.once('drain', function () {
            process.exit(code);
        });
        return;
    }
    process.exit(code);
}

function _invokeCli(cli, cliOptions) {
    if ('default' in cli) {
        cli = cli.default;
    }

    const ret = cli(cliOptions);
    if (ret && typeof ret.then === 'function') {
        ret.then((exitCode) => {
            process.exitCode = typeof exitCode === 'number' ? exitCode : 0;
            _exit(process.exitCode);
        });
    } else if (ret && typeof ret === 'number') {
        process.exitCode = ret;
        _exit(process.exitCode);
    }
}

function _cliGlobal() {
    let cliRootPath = path.resolve(__dirname, '..');
    if (!fs.existsSync(path.resolve(cliRootPath, 'node_modules'))) {
        cliRootPath = path.dirname(cliRootPath);
    }
    const packageJson = require(path.resolve(cliRootPath, './package.json'));
    let cliVersion = packageJson['version'];

    const updateNotifier = require('update-notifier');
    updateNotifier({
            pkg: packageJson
        })
        .notify({
            defer: false
        });

    let cli = null;
    if (fs.existsSync(path.resolve(__dirname, '../cli/index.js'))) {
        cli = require('../cli');
    } else {
        cli = require('../dist/cli');
    }

    const cliOptions = {
        args: process.argv.slice(2),
        cliVersion: cliVersion,
        cliIsGlobal: true,
        cliRootPath: cliRootPath,
        startTime: startTime
    };

    _invokeCli(cli, cliOptions);

}

function _cliLocal() {
    const resolve = require('resolve');

    resolve('@bizappframework/angular-build', {
            basedir: process.cwd()
        },
        (error, projectLocalCli) => {
            if (error) {
                _cliGlobal();
                return;
            }

            let cliRootPath = path.dirname(projectLocalCli);
            if (!fs.existsSync(path.resolve(cliRootPath, 'node_modules'))) {
                cliRootPath = path.dirname(cliRootPath);
            }
            const packageJson = require(path.resolve(cliRootPath, './package.json'));
            let cliVersion = packageJson['version'];

            let localCliPath = path.resolve(path.dirname(projectLocalCli), './cli');
            const cli = require(localCliPath);

            const cliOptions = {
                args: process.argv.slice(2),
                cliVersion: cliVersion,
                cliIsGlobal: false,
                cliRootPath: cliRootPath,
                startTime: startTime
            };

            _invokeCli(cli, cliOptions);
        });
}

// Show the warnings due to package and version deprecation.
const version = new SemVer(process.version);
if (version.compare(new SemVer('6.9.0')) < 0) {
    console.warn(_yellow(`You are running version ${version.version} of Node, which will not be supported by the angular-build cli.\n` +
        `The official Node version that will be supported is 6.9 and greater.`));
}

const localCliPath = path.resolve(process.cwd(), 'node_modules/@bizappframework/angular-build');
const localCliPathExists = fs.existsSync(localCliPath);
localCliPathExists ? _cliLocal() : _cliGlobal();
