{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/utils/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\r\nimport * as fs from 'fs';\r\nimport * as readline from 'readline';\r\nimport * as semver from 'semver';\r\n//import { spawn } from 'child_process';\r\nconst spawn = require('cross-spawn');\r\n\r\nexport function stripComments(content: string): string {\r\n    /**\r\n     * First capturing group matches double quoted string\r\n     * Second matches single quotes string\r\n     * Third matches block comments\r\n     * Fourth matches line comments\r\n     */\r\n    const regexp = /(\"(?:[^\\\\\\\"]*(?:\\\\.)?)*\")|('(?:[^\\\\\\']*(?:\\\\.)?)*')|(\\/\\*(?:\\r?\\n|.)*?\\*\\/)|(\\/{2,}.*?(?:(?:\\r?\\n)|$))/g;\r\n    const result = content.replace(regexp, (match, m1, m2, m3, m4) => {\r\n        // Only one of m1, m2, m3, m4 matches\r\n        if (m3) {\r\n            // A block comment. Replace with nothing\r\n            return \"\";\r\n        } else if (m4) {\r\n            // A line comment. If it ends in \\r?\\n then keep it.\r\n            let length = m4.length;\r\n            if (length > 2 && m4[length - 1] === \"\\n\") {\r\n                return m4[length - 2] === \"\\r\" ? \"\\r\\n\" : \"\\n\";\r\n            } else {\r\n                return \"\";\r\n            }\r\n        } else {\r\n            // We match a string\r\n            return match;\r\n        }\r\n    });\r\n    return result;\r\n};\r\n\r\nexport function readJsonSync(filePath: string) {\r\n    const context = stripComments(fs.readFileSync(filePath).toString().replace(/^\\uFEFF/, ''));\r\n    return JSON.parse(context);\r\n}\r\n\r\nexport function readJsonAsync(filePath: string, throwError?: boolean) {\r\n    return new Promise((resolve, reject) => {\r\n        fs.readFile(filePath, (err, data) => {\r\n            if (err) {\r\n                throwError === false ? resolve(null) : reject(err);\r\n            } else {\r\n                const context = stripComments(data.toString().replace(/^\\uFEFF/, ''));\r\n                resolve(JSON.parse(context));\r\n\r\n            }\r\n        });\r\n    });\r\n}\r\n\r\nexport function checkFileOrDirectoryExistsAsync(filePath: string, isDir?: boolean) {\r\n    return new Promise((resolve) => {\r\n        fs.stat(filePath, (err, stats) => {\r\n            resolve(err ? false : isDir ? stats.isDirectory() : stats.isFile());\r\n        });\r\n    });\r\n}\r\n\r\nexport function findFileOrDirectoryFromPossibleAsync(baseDir: string, possibleNames: string[], preferredName?: string, isDir?: boolean) {\r\n    const tasks = possibleNames.map(name => {\r\n        const pathToFind = path.resolve(baseDir, name);\r\n        return checkFileOrDirectoryExistsAsync(pathToFind, isDir).then(exists => exists ? name : null);\r\n    });\r\n\r\n    return Promise.all(tasks)\r\n        .then(foundList => {\r\n            if (preferredName) {\r\n                return foundList.find(f => f === preferredName) || foundList.find(f => f !== null);\r\n            }\r\n            return foundList.find(f => f !== null);\r\n        });\r\n}\r\n\r\nexport function askAsync(msg: string) {\r\n    const rl = readline.createInterface({\r\n        input: process.stdin,\r\n        output: process.stdout\r\n    });\r\n\r\n    return new Promise((resolve) => {\r\n        rl.question(msg, (answer) => {\r\n            rl.close();\r\n            resolve(answer);\r\n        });\r\n    });\r\n}\r\n\r\nexport function spawnAsync(command: string, commandArgs: string[], showStdOut?: boolean, showStdErr?: boolean) {\r\n    return new Promise((resolve, reject) => {\r\n        //const child = spawn(command, commandArgs, { stdio: 'inherit' });\r\n        const child = spawn(command, commandArgs);\r\n        child.stdout.on('data', (data: any) => {\r\n            if (showStdOut) {\r\n                console.log(`${data}`);\r\n            }\r\n        });\r\n        child.stderr.on('data', (data: any) => {\r\n            if (showStdErr) {\r\n                console.log(`${data}`);\r\n            }\r\n        });\r\n        child.on('error', (err: any) => {\r\n            reject(err);\r\n        });\r\n        child.on('close', (code: number) => {\r\n            resolve(code);\r\n        });\r\n    });\r\n}\r\n\r\nexport function getVersionfromPackageJsonAsync(baseDir: string) {\r\n    const packageJsonPath = path.resolve(baseDir, 'package.json');\r\n    return checkFileOrDirectoryExistsAsync(packageJsonPath).then(exists => {\r\n        if (!exists) {\r\n            return Promise.resolve(null);\r\n        }\r\n        return readJsonAsync(packageJsonPath).then( (pkgCfg: any) => {\r\n            if (pkgCfg['version']) {\r\n                try {\r\n                    return new semver.SemVer(pkgCfg['version']);\r\n                }\r\n                catch (err) {\r\n                    //console.error(err);\r\n                    return null;\r\n                }\r\n            } else {\r\n                return null;\r\n            }\r\n        });\r\n    });\r\n\r\n}"]}