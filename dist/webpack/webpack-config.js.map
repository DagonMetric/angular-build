{"version":3,"file":"webpack-config.js","sourceRoot":"","sources":["../../src/webpack/webpack-config.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\r\nimport * as fs from 'fs';\r\n\r\nimport { AngularAppConfig, AngularBuildOptions } from './models';\r\nimport { readJsonSync, hasProdArg, isDllBuildFromNpmEvent, isAoTBuildFromNpmEvent } from './helpers';\r\nimport { getWebpackAngularConfig } from './webpack-angular-config';\r\n\r\nexport function getWebpackConfigs(projectRoot: string, buildOptions?: AngularBuildOptions) {\r\n    projectRoot = projectRoot || process.cwd();\r\n\r\n    let configFileExists = false;\r\n    let configPath = 'angular-build.json';\r\n    if (!fs.existsSync(path.resolve(projectRoot, configPath))) {\r\n        const tmpConfigPath = 'angular-cli.json';\r\n        if (fs.existsSync(path.resolve(projectRoot, tmpConfigPath))) {\r\n            configPath = tmpConfigPath;\r\n            configFileExists = true;\r\n        }\r\n    } else {\r\n        configFileExists = true;\r\n    }\r\n\r\n    if (!configFileExists) {\r\n        throw new Error(`'angular-build.json' or 'angular-cli.json' file could not be found in ${projectRoot}.`);\r\n    }\r\n    const appsConfig = readJsonSync(path.resolve(projectRoot, configPath));\r\n    buildOptions = buildOptions || {};\r\n    buildOptions.dll = typeof buildOptions.dll === 'undefined' ? isDllBuildFromNpmEvent() : buildOptions.dll;\r\n\r\n    // Extends\r\n    const appConfigs = appsConfig.apps.map((app: AngularAppConfig) => {\r\n        let cloneApp = Object.assign({}, app);\r\n        if (cloneApp.extends) {\r\n            const baseApps = appsConfig.apps.filter((a: AngularAppConfig) => a.name === cloneApp.extends);\r\n            if (baseApps && baseApps.length > 0) {\r\n                const cloneBaseApp = Object.assign({}, baseApps[0]);\r\n                cloneApp = Object.assign({}, cloneBaseApp, cloneApp);\r\n            }\r\n        }\r\n        return cloneApp;\r\n    });\r\n\r\n    const configs = appConfigs.filter((appConfig: AngularAppConfig) => appConfig.enabled !== false &&\r\n        (!buildOptions.dll || (buildOptions.dll && appConfig.dlls && appConfig.dlls.length && !appConfig.skipOnDllsBundle)\r\n        ))\r\n        .map((appConfig: AngularAppConfig) => {\r\n            return getWebpackConfig(projectRoot, appConfig, buildOptions);\r\n        });\r\n    return configs;\r\n}\r\n\r\nexport function getWebpackConfig(projectRoot: string, appConfig: AngularAppConfig, buildOptions?: AngularBuildOptions) {\r\n    projectRoot = projectRoot || process.cwd();\r\n    const defaultBuildOptions: AngularBuildOptions = {\r\n        debug: !hasProdArg(),\r\n        dll: isDllBuildFromNpmEvent(),\r\n        aot: isAoTBuildFromNpmEvent()\r\n    };\r\n    buildOptions = Object.assign(defaultBuildOptions, buildOptions || {});\r\n\r\n    if (!appConfig) {\r\n        throw new Error(`'appConfig' is required.`);\r\n    }\r\n    if (typeof appConfig !== 'object') {\r\n        throw new Error(`Invalid 'appConfig'. 'appConfig' must be an object, but passed ${typeof appConfig}.`);\r\n    }\r\n    if (!buildOptions.dll &&\r\n        !appConfig.main &&\r\n        (!appConfig.styles || !appConfig.styles.length) &&\r\n        (!appConfig.scripts || !appConfig.scripts.length)) {\r\n        throw new Error(`No entry. Set entry in 'appConfig.main'.`);\r\n    }\r\n    if (buildOptions.dll && (!appConfig.dlls || !appConfig.dlls.length)) {\r\n        throw new Error(`No dll entry. Set dll entries in 'appConfig.dlls'.`);\r\n    }\r\n\r\n    // Set defaults\r\n    appConfig.root = appConfig.root || projectRoot;\r\n    appConfig.outDir = appConfig.outDir || appConfig.root;\r\n\r\n    return getWebpackAngularConfig(projectRoot, appConfig, buildOptions);\r\n}"]}