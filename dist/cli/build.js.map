{"version":3,"file":"build.js","sourceRoot":"","sources":["../../src/cli/build.ts"],"names":[],"mappings":"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","sourcesContent":["import * as yargs from 'yargs';\r\nimport * as chalk from 'chalk';\r\nimport * as path from 'path';\r\n\r\nconst webpack = require('webpack');\r\nimport { getWebpackAngularConfig } from '../webpack';\r\n\r\nimport { CliOptions } from './models';\r\n\r\nconst cliVersion = require('../../package.json').version;\r\nconst buildCommandUsage = `\\n${chalk.green(`angular-build ${cliVersion}`)}\\n\r\nUsage:\r\n  ngb build [options...]`;\r\n\r\nexport const buildCommandModule: yargs.CommandModule = {\r\ncommand: 'build',\r\n        describe: 'Create dll bundling',\r\n        builder: (yargv: yargs.Argv) => {\r\n            return yargv\r\n                .reset()\r\n                .usage(buildCommandUsage)\r\n                .example('angular-build build --configFileName', 'use angular-build config files with user defined name')\r\n\r\n                .option('config-file-name',\r\n                {\r\n                    describe: 'Config file name for cli, default: angular-build.json',\r\n                    type: 'string',\r\n                })\r\n                .option('aot',\r\n                {\r\n                    describe: 'Aot build',\r\n                    type: 'boolean'\r\n                })\r\n                .option('progress',\r\n                {\r\n                    describe: 'Show progress',\r\n                    type: 'boolean'\r\n                })\r\n                .option('debug',\r\n                {\r\n                    describe: 'Debug mode',\r\n                    type: 'boolean',\r\n                    default: true\r\n                })\r\n                .option('dll',\r\n                {\r\n                    describe: 'Dll build',\r\n                    type: 'boolean'\r\n                })\r\n                .option('copy-assets-on-dll-build',\r\n                {\r\n                    describe: 'Copy assets on dll build',\r\n                    type: 'boolean'\r\n                })\r\n                .option('sourcemap-on-production',\r\n                {\r\n                    describe: 'Source map on production',\r\n                    type: 'boolean'\r\n                })\r\n                .option('generate-assets-on-development',\r\n                {\r\n                    describe: 'Generate assets on development',\r\n                    type: 'boolean'\r\n                })\r\n                .option('generate-assets-on-production',\r\n                {\r\n                    describe: 'generate assets on production',\r\n                    type: 'boolean'\r\n                })\r\n                .option('generate-stats-on-development',\r\n                {\r\n                    describe: 'Generate stats on development',\r\n                    type: 'boolean'\r\n                })\r\n                .option('generate-stats-on-production',\r\n                {\r\n                    describe: 'Generate stats on production',\r\n                    type: 'boolean'\r\n                })\r\n                .option('project', {\r\n                    describe: 'Desire project root folder path, example path include space: use double quotes \"C:\\\\example build\\\\project\" ',\r\n                    type: 'string'\r\n                })\r\n                .option(\"verbose\", {\r\n                    describe: 'Output everythings',\r\n                    type: 'boolean',\r\n                    default: true,\r\n                })\r\n                .option(\"watch\", {\r\n                    describe: 'After a change the watcher waits that time (in milliseconds-Default: 300) for more changes.Default: false',\r\n                    type: 'boolean'\r\n                })\r\n        },\r\n        handler: null\r\n};\r\n\r\nconst webpackOutputOptions = {\r\n    colors: true,\r\n    hash: true,\r\n    timings: true,\r\n    chunks: true,\r\n    chunkModules: false,\r\n    children: false, // listing all children is very noisy in AOT and hides warnings/errors\r\n    modules: false,\r\n    reasons: false,\r\n    warnings: true,\r\n    assets: false, // listing all assets is very noisy when using assets directories\r\n    version: false\r\n};\r\n\r\nconst verboseWebpackOutputOptions = {\r\n    children: true,\r\n    assets: true,\r\n    version: true,\r\n    reasons: true,\r\n    chunkModules: false // TODO: set to true when console to file output is fixed\r\n};\r\n\r\nfunction getWebpackStatsConfig(verbose = false) {\r\n    return verbose\r\n        ? Object.assign(webpackOutputOptions, verboseWebpackOutputOptions)\r\n        : webpackOutputOptions;\r\n}\r\n\r\n\r\nexport function build(cliOptions: CliOptions) {\r\n    return new Promise((resolve, reject) => {\r\n        if (cliOptions.commandOptions.project) {\r\n            cliOptions.cwd = path.isAbsolute(cliOptions.commandOptions.project) ? cliOptions.commandOptions.project : path.join(cliOptions.cwd, cliOptions.commandOptions.project);\r\n        }\r\n        var statsConfig = getWebpackStatsConfig(cliOptions.commandOptions.verbose);\r\n        const config = getWebpackAngularConfig(cliOptions.cwd, cliOptions.commandOptions.configFileName, cliOptions.commandOptions);\r\n        //const config = Object.assign(config1, { cache: false });\r\n\r\n        let webpackCompiler = webpack(config);\r\n        const callback = (err:any, stats:any) => {\r\n            webpackCompiler.purgeInputFileSystem();\r\n            if (err) {\r\n                return reject(err);\r\n            }\r\n\r\n            console.log(stats.toString(statsConfig));\r\n\r\n            if (cliOptions.commandOptions.watch) {\r\n                return;\r\n            }\r\n\r\n            if (stats.hasErrors()) {\r\n                reject();\r\n            } else {\r\n\r\n                resolve();\r\n            }\r\n        };\r\n\r\n        if (cliOptions.commandOptions.watch) {\r\n            webpackCompiler.watch({}, callback);\r\n        } else {\r\n            webpackCompiler.run(callback);\r\n            console.log('');\r\n        }\r\n    });\r\n}"]}