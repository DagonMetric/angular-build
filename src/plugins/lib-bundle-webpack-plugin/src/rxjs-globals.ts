 // tslint:disable:no-any
// tslint:disable:no-unsafe-any

import * as resolve from 'resolve';

const defaultRxJsGlobals = {
    rxjs: 'Rx',
    'rxjs/operators': 'Rx.operators',

    // RxJs 5
    'rxjs/Subscription': 'Rx',
    'rxjs/Subscriber': 'Rx',
    'rxjs/SubjectSubscription': 'Rx',
    'rxjs/Subject': 'Rx',
    'rxjs/Scheduler': 'Rx',
    'rxjs/Rx': 'Rx',
    'rxjs/ReplaySubject': 'Rx',
    'rxjs/OuterSubscriber': 'Rx',
    'rxjs/Operator': 'Rx',
    'rxjs/Observer': 'Rx',
    'rxjs/Observable': 'Rx',
    'rxjs/Notification': 'Rx',
    'rxjs/InnerSubscriber': 'Rx',
    'rxjs/BehaviorSubject': 'Rx',
    'rxjs/AsyncSubject': 'Rx',

    // rxjs/observable
    'rxjs/observable/using': 'Rx.Observable',
    'rxjs/observable/timer': 'Rx.Observable',
    'rxjs/observable/throw': 'Rx.Observable',
    'rxjs/observable/range': 'Rx.Observable',
    'rxjs/observable/race': 'Rx.Observable',
    'rxjs/observable/pairs': 'Rx.Observable',
    'rxjs/observable/onErrorResumeNext': 'Rx.Observable',
    'rxjs/observable/of': 'Rx.Observable',
    'rxjs/observable/never': 'Rx.Observable',
    'rxjs/observable/merge': 'Rx.Observable',
    'rxjs/observable/interval': 'Rx.Observable',
    'rxjs/observable/if': 'Rx.Observable',
    'rxjs/observable/generate': 'Rx.Observable',
    'rxjs/observable/fromPromise': 'Rx.Observable',
    'rxjs/observable/fromEventPattern': 'Rx.Observable',
    'rxjs/observable/fromEvent': 'Rx.Observable',
    'rxjs/observable/from': 'Rx.Observable',
    'rxjs/observable/forkJoin': 'Rx.Observable',
    'rxjs/observable/empty': 'Rx.Observable',
    'rxjs/observable/dom/webSocket': 'Rx.Observable',
    'rxjs/observable/dom/ajax': 'Rx.Observable',
    'rxjs/observable/dom/WebSocketSubject': 'Rx.Observable',
    'rxjs/observable/dom/AjaxObservable': 'Rx.Observable',
    'rxjs/observable/defer': 'Rx.Observable',
    'rxjs/observable/concat': 'Rx.Observable',
    'rxjs/observable/combineLatest': 'Rx.Observable',
    'rxjs/observable/bindNodeCallback': 'Rx.Observable',
    'rxjs/observable/bindCallback': 'Rx.Observable',
    'rxjs/observable/UsingObservable': 'Rx.Observable',
    'rxjs/observable/TimerObservable': 'Rx.Observable',
    'rxjs/observable/SubscribeOnObservable': 'Rx.Observable',
    'rxjs/observable/ScalarObservable': 'Rx.Observable',
    'rxjs/observable/RangeObservable': 'Rx.Observable',
    'rxjs/observable/PromiseObservable': 'Rx.Observable',
    'rxjs/observable/PairsObservable': 'Rx.Observable',
    'rxjs/observable/NeverObservable': 'Rx.Observable',
    'rxjs/observable/IteratorObservable': 'Rx.Observable',
    'rxjs/observable/IntervalObservable': 'Rx.Observable',
    'rxjs/observable/IfObservable': 'Rx.Observable',
    'rxjs/observable/GenerateObservable': 'Rx.Observable',
    'rxjs/observable/FromObservable': 'Rx.Observable',
    'rxjs/observable/FromEventPatternObservable': 'Rx.Observable',
    'rxjs/observable/FromEventObservable': 'Rx.Observable',
    'rxjs/observable/ForkJoinObservable': 'Rx.Observable',
    'rxjs/observable/ErrorObservable': 'Rx.Observable',
    'rxjs/observable/EmptyObservable': 'Rx.Observable',
    'rxjs/observable/DeferObservable': 'Rx.Observable',
    'rxjs/observable/ConnectableObservable': 'Rx.Observable',
    'rxjs/observable/BoundNodeCallbackObservable': 'Rx.Observable',
    'rxjs/observable/BoundCallbackObservable': 'Rx.Observable',
    'rxjs/observable/ArrayObservable': 'Rx.Observable',
    'rxjs/observable/ArrayLikeObservable': 'Rx.Observable',

    // rxjs/add/observable
    'rxjs/add/observable/zip': 'Rx.Observable',
    'rxjs/add/observable/using': 'Rx.Observable',
    'rxjs/add/observable/timer': 'Rx.Observable',
    'rxjs/add/observable/throw': 'Rx.Observable',
    'rxjs/add/observable/range': 'Rx.Observable',
    'rxjs/add/observable/race': 'Rx.Observable',
    'rxjs/add/observable/pairs': 'Rx.Observable',
    'rxjs/add/observable/onErrorResumeNext': 'Rx.Observable',
    'rxjs/add/observable/of': 'Rx.Observable',
    'rxjs/add/observable/never': 'Rx.Observable',
    'rxjs/add/observable/merge': 'Rx.Observable',
    'rxjs/add/observable/interval': 'Rx.Observable',
    'rxjs/add/observable/if': 'Rx.Observable',
    'rxjs/add/observable/generate': 'Rx.Observable',
    'rxjs/add/observable/fromPromise': 'Rx.Observable',
    'rxjs/add/observable/fromEventPattern': 'Rx.Observable',
    'rxjs/add/observable/fromEvent': 'Rx.Observable',
    'rxjs/add/observable/from': 'Rx.Observable',
    'rxjs/add/observable/forkJoin': 'Rx.Observable',
    'rxjs/add/observable/empty': 'Rx.Observable',
    'rxjs/add/observable/dom/webSocket': 'Rx.Observable',
    'rxjs/add/observable/dom/ajax': 'Rx.Observable',
    'rxjs/add/observable/defer': 'Rx.Observable',
    'rxjs/add/observable/concat': 'Rx.Observable',
    'rxjs/add/observable/combineLatest': 'Rx.Observable',
    'rxjs/add/observable/bindNodeCallback': 'Rx.Observable',
    'rxjs/add/observable/bindCallback': 'Rx.Observable',

    // rxjs/add/operator
    'rxjs/add/operator/zipAll': 'Rx.Observable.prototype',
    'rxjs/add/operator/zip': 'Rx.Observable.prototype',
    'rxjs/add/operator/withLatestFrom': 'Rx.Observable.prototype',
    'rxjs/add/operator/windowWhen': 'Rx.Observable.prototype',
    'rxjs/add/operator/windowToggle': 'Rx.Observable.prototype',
    'rxjs/add/operator/windowTime': 'Rx.Observable.prototype',
    'rxjs/add/operator/windowCount': 'Rx.Observable.prototype',
    'rxjs/add/operator/window': 'Rx.Observable.prototype',
    'rxjs/add/operator/toPromise': 'Rx.Observable.prototype',
    'rxjs/add/operator/toArray': 'Rx.Observable.prototype',
    'rxjs/add/operator/timestamp': 'Rx.Observable.prototype',
    'rxjs/add/operator/timeoutWith': 'Rx.Observable.prototype',
    'rxjs/add/operator/timeout': 'Rx.Observable.prototype',
    'rxjs/add/operator/timeInterval': 'Rx.Observable.prototype',
    'rxjs/add/operator/throttleTime': 'Rx.Observable.prototype',
    'rxjs/add/operator/throttle': 'Rx.Observable.prototype',
    'rxjs/add/operator/takeWhile': 'Rx.Observable.prototype',
    'rxjs/add/operator/takeUntil': 'Rx.Observable.prototype',
    'rxjs/add/operator/takeLast': 'Rx.Observable.prototype',
    'rxjs/add/operator/take': 'Rx.Observable.prototype',
    'rxjs/add/operator/switchMapTo': 'Rx.Observable.prototype',
    'rxjs/add/operator/switchMap': 'Rx.Observable.prototype',
    'rxjs/add/operator/switch': 'Rx.Observable.prototype',
    'rxjs/add/operator/subscribeOn': 'Rx.Observable.prototype',
    'rxjs/add/operator/startWith': 'Rx.Observable.prototype',
    'rxjs/add/operator/skipWhile': 'Rx.Observable.prototype',
    'rxjs/add/operator/skipUntil': 'Rx.Observable.prototype',
    'rxjs/add/operator/skipLast': 'Rx.Observable.prototype',
    'rxjs/add/operator/skip': 'Rx.Observable.prototype',
    'rxjs/add/operator/single': 'Rx.Observable.prototype',
    'rxjs/add/operator/shareReplay': 'Rx.Observable.prototype',
    'rxjs/add/operator/share': 'Rx.Observable.prototype',
    'rxjs/add/operator/sequenceEqual': 'Rx.Observable.prototype',
    'rxjs/add/operator/scan': 'Rx.Observable.prototype',
    'rxjs/add/operator/sampleTime': 'Rx.Observable.prototype',
    'rxjs/add/operator/sample': 'Rx.Observable.prototype',
    'rxjs/add/operator/retryWhen': 'Rx.Observable.prototype',
    'rxjs/add/operator/retry': 'Rx.Observable.prototype',
    'rxjs/add/operator/repeatWhen': 'Rx.Observable.prototype',
    'rxjs/add/operator/repeat': 'Rx.Observable.prototype',
    'rxjs/add/operator/reduce': 'Rx.Observable.prototype',
    'rxjs/add/operator/race': 'Rx.Observable.prototype',
    'rxjs/add/operator/publishReplay': 'Rx.Observable.prototype',
    'rxjs/add/operator/publishLast': 'Rx.Observable.prototype',
    'rxjs/add/operator/publishBehavior': 'Rx.Observable.prototype',
    'rxjs/add/operator/publish': 'Rx.Observable.prototype',
    'rxjs/add/operator/pluck': 'Rx.Observable.prototype',
    'rxjs/add/operator/partition': 'Rx.Observable.prototype',
    'rxjs/add/operator/pairwise': 'Rx.Observable.prototype',
    'rxjs/add/operator/onErrorResumeNext': 'Rx.Observable.prototype',
    'rxjs/add/operator/observeOn': 'Rx.Observable.prototype',
    'rxjs/add/operator/multicast': 'Rx.Observable.prototype',
    'rxjs/add/operator/min': 'Rx.Observable.prototype',
    'rxjs/add/operator/mergeScan': 'Rx.Observable.prototype',
    'rxjs/add/operator/mergeMapTo': 'Rx.Observable.prototype',
    'rxjs/add/operator/mergeMap': 'Rx.Observable.prototype',
    'rxjs/add/operator/mergeAll': 'Rx.Observable.prototype',
    'rxjs/add/operator/merge': 'Rx.Observable.prototype',
    'rxjs/add/operator/max': 'Rx.Observable.prototype',
    'rxjs/add/operator/materialize': 'Rx.Observable.prototype',
    'rxjs/add/operator/mapTo': 'Rx.Observable.prototype',
    'rxjs/add/operator/map': 'Rx.Observable.prototype',
    'rxjs/add/operator/let': 'Rx.Observable.prototype',
    'rxjs/add/operator/last': 'Rx.Observable.prototype',
    'rxjs/add/operator/isEmpty': 'Rx.Observable.prototype',
    'rxjs/add/operator/ignoreElements': 'Rx.Observable.prototype',
    'rxjs/add/operator/groupBy': 'Rx.Observable.prototype',
    'rxjs/add/operator/first': 'Rx.Observable.prototype',
    'rxjs/add/operator/findIndex': 'Rx.Observable.prototype',
    'rxjs/add/operator/find': 'Rx.Observable.prototype',
    'rxjs/add/operator/finally': 'Rx.Observable.prototype',
    'rxjs/add/operator/filter': 'Rx.Observable.prototype',
    'rxjs/add/operator/expand': 'Rx.Observable.prototype',
    'rxjs/add/operator/exhaustMap': 'Rx.Observable.prototype',
    'rxjs/add/operator/exhaust': 'Rx.Observable.prototype',
    'rxjs/add/operator/every': 'Rx.Observable.prototype',
    'rxjs/add/operator/elementAt': 'Rx.Observable.prototype',
    'rxjs/add/operator/do': 'Rx.Observable.prototype',
    'rxjs/add/operator/distinctUntilKeyChanged': 'Rx.Observable.prototype',
    'rxjs/add/operator/distinctUntilChanged': 'Rx.Observable.prototype',
    'rxjs/add/operator/distinct': 'Rx.Observable.prototype',
    'rxjs/add/operator/dematerialize': 'Rx.Observable.prototype',
    'rxjs/add/operator/delayWhen': 'Rx.Observable.prototype',
    'rxjs/add/operator/delay': 'Rx.Observable.prototype',
    'rxjs/add/operator/defaultIfEmpty': 'Rx.Observable.prototype',
    'rxjs/add/operator/debounceTime': 'Rx.Observable.prototype',
    'rxjs/add/operator/debounce': 'Rx.Observable.prototype',
    'rxjs/add/operator/count': 'Rx.Observable.prototype',
    'rxjs/add/operator/concatMapTo': 'Rx.Observable.prototype',
    'rxjs/add/operator/concatMap': 'Rx.Observable.prototype',
    'rxjs/add/operator/concatAll': 'Rx.Observable.prototype',
    'rxjs/add/operator/concat': 'Rx.Observable.prototype',
    'rxjs/add/operator/combineLatest': 'Rx.Observable.prototype',
    'rxjs/add/operator/combineAll': 'Rx.Observable.prototype',
    'rxjs/add/operator/catch': 'Rx.Observable.prototype',
    'rxjs/add/operator/bufferWhen': 'Rx.Observable.prototype',
    'rxjs/add/operator/bufferToggle': 'Rx.Observable.prototype',
    'rxjs/add/operator/bufferTime': 'Rx.Observable.prototype',
    'rxjs/add/operator/bufferCount': 'Rx.Observable.prototype',
    'rxjs/add/operator/buffer': 'Rx.Observable.prototype',
    'rxjs/add/operator/auditTime': 'Rx.Observable.prototype',
    'rxjs/add/operator/audit': 'Rx.Observable.prototype',

    // rxjs/operator
    'rxjs/operator/zipAll': 'Rx.Observable.prototype',
    'rxjs/operator/zip': 'Rx.Observable.prototype',
    'rxjs/operator/withLatestFrom': 'Rx.Observable.prototype',
    'rxjs/operator/windowWhen': 'Rx.Observable.prototype',
    'rxjs/operator/windowToggle': 'Rx.Observable.prototype',
    'rxjs/operator/windowTime': 'Rx.Observable.prototype',
    'rxjs/operator/windowCount': 'Rx.Observable.prototype',
    'rxjs/operator/window': 'Rx.Observable.prototype',
    'rxjs/operator/toPromise': 'Rx.Observable.prototype',
    'rxjs/operator/toArray': 'Rx.Observable.prototype',
    'rxjs/operator/timestamp': 'Rx.Observable.prototype',
    'rxjs/operator/timeoutWith': 'Rx.Observable.prototype',
    'rxjs/operator/timeout': 'Rx.Observable.prototype',
    'rxjs/operator/timeInterval': 'Rx.Observable.prototype',
    'rxjs/operator/throttleTime': 'Rx.Observable.prototype',
    'rxjs/operator/throttle': 'Rx.Observable.prototype',
    'rxjs/operator/takeWhile': 'Rx.Observable.prototype',
    'rxjs/operator/takeUntil': 'Rx.Observable.prototype',
    'rxjs/operator/takeLast': 'Rx.Observable.prototype',
    'rxjs/operator/take': 'Rx.Observable.prototype',
    'rxjs/operator/switchMapTo': 'Rx.Observable.prototype',
    'rxjs/operator/switchMap': 'Rx.Observable.prototype',
    'rxjs/operator/switch': 'Rx.Observable.prototype',
    'rxjs/operator/subscribeOn': 'Rx.Observable.prototype',
    'rxjs/operator/startWith': 'Rx.Observable.prototype',
    'rxjs/operator/skipWhile': 'Rx.Observable.prototype',
    'rxjs/operator/skipUntil': 'Rx.Observable.prototype',
    'rxjs/operator/skipLast': 'Rx.Observable.prototype',
    'rxjs/operator/skip': 'Rx.Observable.prototype',
    'rxjs/operator/single': 'Rx.Observable.prototype',
    'rxjs/operator/shareReplay': 'Rx.Observable.prototype',
    'rxjs/operator/share': 'Rx.Observable.prototype',
    'rxjs/operator/sequenceEqual': 'Rx.Observable.prototype',
    'rxjs/operator/scan': 'Rx.Observable.prototype',
    'rxjs/operator/sampleTime': 'Rx.Observable.prototype',
    'rxjs/operator/sample': 'Rx.Observable.prototype',
    'rxjs/operator/retryWhen': 'Rx.Observable.prototype',
    'rxjs/operator/retry': 'Rx.Observable.prototype',
    'rxjs/operator/repeatWhen': 'Rx.Observable.prototype',
    'rxjs/operator/repeat': 'Rx.Observable.prototype',
    'rxjs/operator/reduce': 'Rx.Observable.prototype',
    'rxjs/operator/race': 'Rx.Observable.prototype',
    'rxjs/operator/publishReplay': 'Rx.Observable.prototype',
    'rxjs/operator/publishLast': 'Rx.Observable.prototype',
    'rxjs/operator/publishBehavior': 'Rx.Observable.prototype',
    'rxjs/operator/publish': 'Rx.Observable.prototype',
    'rxjs/operator/pluck': 'Rx.Observable.prototype',
    'rxjs/operator/partition': 'Rx.Observable.prototype',
    'rxjs/operator/pairwise': 'Rx.Observable.prototype',
    'rxjs/operator/onErrorResumeNext': 'Rx.Observable.prototype',
    'rxjs/operator/observeOn': 'Rx.Observable.prototype',
    'rxjs/operator/multicast': 'Rx.Observable.prototype',
    'rxjs/operator/min': 'Rx.Observable.prototype',
    'rxjs/operator/mergeScan': 'Rx.Observable.prototype',
    'rxjs/operator/mergeMapTo': 'Rx.Observable.prototype',
    'rxjs/operator/mergeMap': 'Rx.Observable.prototype',
    'rxjs/operator/mergeAll': 'Rx.Observable.prototype',
    'rxjs/operator/merge': 'Rx.Observable.prototype',
    'rxjs/operator/max': 'Rx.Observable.prototype',
    'rxjs/operator/materialize': 'Rx.Observable.prototype',
    'rxjs/operator/mapTo': 'Rx.Observable.prototype',
    'rxjs/operator/map': 'Rx.Observable.prototype',
    'rxjs/operator/let': 'Rx.Observable.prototype',
    'rxjs/operator/last': 'Rx.Observable.prototype',
    'rxjs/operator/isEmpty': 'Rx.Observable.prototype',
    'rxjs/operator/ignoreElements': 'Rx.Observable.prototype',
    'rxjs/operator/groupBy': 'Rx.Observable.prototype',
    'rxjs/operator/first': 'Rx.Observable.prototype',
    'rxjs/operator/findIndex': 'Rx.Observable.prototype',
    'rxjs/operator/find': 'Rx.Observable.prototype',
    'rxjs/operator/finally': 'Rx.Observable.prototype',
    'rxjs/operator/filter': 'Rx.Observable.prototype',
    'rxjs/operator/expand': 'Rx.Observable.prototype',
    'rxjs/operator/exhaustMap': 'Rx.Observable.prototype',
    'rxjs/operator/exhaust': 'Rx.Observable.prototype',
    'rxjs/operator/every': 'Rx.Observable.prototype',
    'rxjs/operator/elementAt': 'Rx.Observable.prototype',
    'rxjs/operator/do': 'Rx.Observable.prototype',
    'rxjs/operator/distinctUntilKeyChanged': 'Rx.Observable.prototype',
    'rxjs/operator/distinctUntilChanged': 'Rx.Observable.prototype',
    'rxjs/operator/distinct': 'Rx.Observable.prototype',
    'rxjs/operator/dematerialize': 'Rx.Observable.prototype',
    'rxjs/operator/delayWhen': 'Rx.Observable.prototype',
    'rxjs/operator/delay': 'Rx.Observable.prototype',
    'rxjs/operator/defaultIfEmpty': 'Rx.Observable.prototype',
    'rxjs/operator/debounceTime': 'Rx.Observable.prototype',
    'rxjs/operator/debounce': 'Rx.Observable.prototype',
    'rxjs/operator/count': 'Rx.Observable.prototype',
    'rxjs/operator/concatMapTo': 'Rx.Observable.prototype',
    'rxjs/operator/concatMap': 'Rx.Observable.prototype',
    'rxjs/operator/concatAll': 'Rx.Observable.prototype',
    'rxjs/operator/concat': 'Rx.Observable.prototype',
    'rxjs/operator/combineLatest': 'Rx.Observable.prototype',
    'rxjs/operator/combineAll': 'Rx.Observable.prototype',
    'rxjs/operator/catch': 'Rx.Observable.prototype',
    'rxjs/operator/bufferWhen': 'Rx.Observable.prototype',
    'rxjs/operator/bufferToggle': 'Rx.Observable.prototype',
    'rxjs/operator/bufferTime': 'Rx.Observable.prototype',
    'rxjs/operator/bufferCount': 'Rx.Observable.prototype',
    'rxjs/operator/buffer': 'Rx.Observable.prototype',
    'rxjs/operator/auditTime': 'Rx.Observable.prototype',
    'rxjs/operator/audit': 'Rx.Observable.prototype',

    // rxjs/operators
    'rxjs/operators/zipAll': 'Rx.operators',
    'rxjs/operators/zip': 'Rx.operators',
    'rxjs/operators/withLatestFrom': 'Rx.operators',
    'rxjs/operators/windowWhen': 'Rx.operators',
    'rxjs/operators/windowToggle': 'Rx.operators',
    'rxjs/operators/windowTime': 'Rx.operators',
    'rxjs/operators/windowCount': 'Rx.operators',
    'rxjs/operators/window': 'Rx.operators',
    'rxjs/operators/toArray': 'Rx.operators',
    'rxjs/operators/timestamp': 'Rx.operators',
    'rxjs/operators/timeoutWith': 'Rx.operators',
    'rxjs/operators/timeout': 'Rx.operators',
    'rxjs/operators/timeInterval': 'Rx.operators',
    'rxjs/operators/throttleTime': 'Rx.operators',
    'rxjs/operators/throttle': 'Rx.operators',
    'rxjs/operators/tap': 'Rx.operators',
    'rxjs/operators/takeWhile': 'Rx.operators',
    'rxjs/operators/takeUntil': 'Rx.operators',
    'rxjs/operators/takeLast': 'Rx.operators',
    'rxjs/operators/take': 'Rx.operators',
    'rxjs/operators/switchMapTo': 'Rx.operators',
    'rxjs/operators/switchMap': 'Rx.operators',
    'rxjs/operators/switchAll': 'Rx.operators',
    'rxjs/operators/subscribeOn': 'Rx.operators',
    'rxjs/operators/startWith': 'Rx.operators',
    'rxjs/operators/skipWhile': 'Rx.operators',
    'rxjs/operators/skipUntil': 'Rx.operators',
    'rxjs/operators/skipLast': 'Rx.operators',
    'rxjs/operators/skip': 'Rx.operators',
    'rxjs/operators/single': 'Rx.operators',
    'rxjs/operators/shareReplay': 'Rx.operators',
    'rxjs/operators/share': 'Rx.operators',
    'rxjs/operators/sequenceEqual': 'Rx.operators',
    'rxjs/operators/scan': 'Rx.operators',
    'rxjs/operators/sampleTime': 'Rx.operators',
    'rxjs/operators/sample': 'Rx.operators',
    'rxjs/operators/retryWhen': 'Rx.operators',
    'rxjs/operators/retry': 'Rx.operators',
    'rxjs/operators/repeatWhen': 'Rx.operators',
    'rxjs/operators/repeat': 'Rx.operators',
    'rxjs/operators/refCount': 'Rx.operators',
    'rxjs/operators/reduce': 'Rx.operators',
    'rxjs/operators/race': 'Rx.operators',
    'rxjs/operators/publishReplay': 'Rx.operators',
    'rxjs/operators/publishLast': 'Rx.operators',
    'rxjs/operators/publishBehavior': 'Rx.operators',
    'rxjs/operators/publish': 'Rx.operators',
    'rxjs/operators/pluck': 'Rx.operators',
    'rxjs/operators/partition': 'Rx.operators',
    'rxjs/operators/pairwise': 'Rx.operators',
    'rxjs/operators/onErrorResumeNext': 'Rx.operators',
    'rxjs/operators/observeOn': 'Rx.operators',
    'rxjs/operators/multicast': 'Rx.operators',
    'rxjs/operators/min': 'Rx.operators',
    'rxjs/operators/mergeScan': 'Rx.operators',
    'rxjs/operators/mergeMapTo': 'Rx.operators',
    'rxjs/operators/mergeMap': 'Rx.operators',
    'rxjs/operators/mergeAll': 'Rx.operators',
    'rxjs/operators/merge': 'Rx.operators',
    'rxjs/operators/max': 'Rx.operators',
    'rxjs/operators/materialize': 'Rx.operators',
    'rxjs/operators/mapTo': 'Rx.operators',
    'rxjs/operators/map': 'Rx.operators',
    'rxjs/operators/last': 'Rx.operators',
    'rxjs/operators/isEmpty': 'Rx.operators',
    'rxjs/operators/ignoreElements': 'Rx.operators',
    'rxjs/operators/groupBy': 'Rx.operators',
    'rxjs/operators/first': 'Rx.operators',
    'rxjs/operators/findIndex': 'Rx.operators',
    'rxjs/operators/find': 'Rx.operators',
    'rxjs/operators/finalize': 'Rx.operators',
    'rxjs/operators/filter': 'Rx.operators',
    'rxjs/operators/expand': 'Rx.operators',
    'rxjs/operators/exhaustMap': 'Rx.operators',
    'rxjs/operators/exhaust': 'Rx.operators',
    'rxjs/operators/every': 'Rx.operators',
    'rxjs/operators/elementAt': 'Rx.operators',
    'rxjs/operators/distinctUntilKeyChanged': 'Rx.operators',
    'rxjs/operators/distinctUntilChanged': 'Rx.operators',
    'rxjs/operators/distinct': 'Rx.operators',
    'rxjs/operators/dematerialize': 'Rx.operators',
    'rxjs/operators/delayWhen': 'Rx.operators',
    'rxjs/operators/delay': 'Rx.operators',
    'rxjs/operators/defaultIfEmpty': 'Rx.operators',
    'rxjs/operators/debounceTime': 'Rx.operators',
    'rxjs/operators/debounce': 'Rx.operators',
    'rxjs/operators/count': 'Rx.operators',
    'rxjs/operators/concatMapTo': 'Rx.operators',
    'rxjs/operators/concatMap': 'Rx.operators',
    'rxjs/operators/concatAll': 'Rx.operators',
    'rxjs/operators/concat': 'Rx.operators',
    'rxjs/operators/combineLatest': 'Rx.operators',
    'rxjs/operators/combineAll': 'Rx.operators',
    'rxjs/operators/catchError': 'Rx.operators',
    'rxjs/operators/bufferWhen': 'Rx.operators',
    'rxjs/operators/bufferToggle': 'Rx.operators',
    'rxjs/operators/bufferTime': 'Rx.operators',
    'rxjs/operators/bufferCount': 'Rx.operators',
    'rxjs/operators/buffer': 'Rx.operators',
    'rxjs/operators/auditTime': 'Rx.operators',
    'rxjs/operators/audit': 'Rx.operators',
};

export function getRxJsGlobals(nodeModulePath?: string): { [key: string]: string } {
    const rxJsGlobals: { [key: string]: string } = {
        ...defaultRxJsGlobals
    };

    if (nodeModulePath) {
        try {
            // tslint:disable-next-line:non-literal-require
            const pathMapping = require(resolve.sync('rxjs/_esm2015/path-mapping', { basedir: nodeModulePath }));
            const alias = pathMapping();
            Object.keys(alias).forEach(key => {
                if (key.startsWith('rxjs/observable/') || key.startsWith('rxjs/add/observable/')) {
                    rxJsGlobals[key] = 'Rx.Observable';
                } else if (key.startsWith('rxjs/add/operator/') || key.startsWith('rxjs/operator/')) {
                    rxJsGlobals[key] = 'Rx.Observable.prototype';
                } else if (key.startsWith('rxjs/operators/')) {
                    rxJsGlobals[key] = 'Rx.operators';
                }
            });

        } catch (ex) {
            // do nothing
        }
    }

    return rxJsGlobals;
}
